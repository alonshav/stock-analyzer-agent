import { AnalysisOptions, AnalysisResult } from '@stock-analyzer/agent/core';

export interface AnalysisRequest {
  ticker: string;
  prompt: string;
  options?: AnalysisOptions;
}

export interface AnalysisResponse {
  analysisId: string;
  status: 'processing' | 'complete' | 'error';
  ticker: string;
  startTime?: number;
  completionTime?: number;
  result?: AnalysisResult;
  error?: string;
}

export interface StreamConnectionResponse {
  type: 'connected';
  streamId: string;
  ticker: string;
}

export interface StreamChunkResponse {
  type: 'chunk';
  ticker: string;
  content: string;
  phase: string;
  timestamp: string;
}

export interface StreamToolResponse {
  type: 'tool';
  ticker: string;
  toolName: string;
  toolId: string;
  toolInput?: any; // Tool arguments/parameters
  timestamp: string;
}

export interface StreamThinkingResponse {
  type: 'thinking';
  ticker: string;
  message: string;
  timestamp: string;
}

export interface StreamPDFResponse {
  type: 'pdf';
  ticker: string;
  pdfBase64: string;
  fileSize: number;
  reportType: 'full' | 'summary';
  timestamp: string;
}

export interface StreamCompleteResponse {
  type: 'complete';
  ticker: string;
  fullAnalysis?: string; // Optional - not generated by default
  executiveSummary?: string; // Optional - already streamed as chunks
  metadata: {
    analysisDate: string;
    framework: string;
    model: string;
    duration: number;
  };
}

export interface StreamToolResultResponse {
  type: 'tool_result';
  ticker: string;
  toolId: string;
  timestamp: string;
}

export interface StreamResultResponse {
  type: 'result';
  ticker: string;
  success: boolean;
  executionTime: number;
  cost: number;
  totalTokens: number;
  timestamp: string;
}

export interface StreamSystemResponse {
  type: 'system';
  ticker: string;
  model: string;
  permissionMode: string;
  timestamp: string;
}

export interface StreamCompactionResponse {
  type: 'compaction';
  ticker: string;
  trigger: string;
  messagesBefore: number;
  messagesAfter: number;
  timestamp: string;
}

export interface StreamPartialResponse {
  type: 'partial';
  ticker: string;
  partialContent: string;
  deltaType: 'text' | 'thinking' | 'tool_input' | 'unknown';
  timestamp: string;
}

export interface StreamErrorResponse {
  type: 'error';
  message: string;
  timestamp: string;
}

export type StreamResponse =
  | StreamConnectionResponse
  | StreamChunkResponse
  | StreamToolResponse
  | StreamThinkingResponse
  | StreamToolResultResponse
  | StreamPDFResponse
  | StreamResultResponse
  | StreamSystemResponse
  | StreamCompactionResponse
  | StreamPartialResponse
  | StreamCompleteResponse
  | StreamErrorResponse;
